name: Run SAGE_ROOT/tox.ini

## This GitHub Actions workflow runs SAGE_ROOT/tox.ini with select environments,
## whenever a GitHub pull request is opened or synchronized in a repository
## where GitHub Actions are enabled.
##
## It builds and checks some sage spkgs as defined in TARGETS.
##
## A job succeeds if there is no error.
##
## The build is run with "make V=0", so the build logs of individual packages are suppressed.
##
## At the end, all package build logs that contain an error are printed out.
##
## After all jobs have finished (or are canceled) and a short delay,
## tar files of all logs are made available as "build artifacts".

#on: [push, pull_request]

on:
  pull_request:
    types: [opened, synchronize]
  push:
    tags:
      - '*'
  workflow_dispatch:
    # Allow to run manually

env:
  TARGETS_PRE: all-sage-local
  TARGETS: build doc-html
  TARGETS_OPTIONAL: ptest

jobs:

  local-macos:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        stage: ["1", "2", "2-optional-0-g", "2-optional-h-o", "2-optional-p", "2-optional-q-z"]
        tox_system_factor: [homebrew-macos, conda-forge-macos]
        tox_packages_factor: [minimal, standard]
        # As of 2021-03, default xcode is 12.4
        # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md#xcode
        xcode_version_factor: [default]
        os: [ macos-11.0 ]
    env:
      TOX_ENV: local-${{ matrix.tox_system_factor }}-${{ matrix.tox_packages_factor }}
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-tox-local-${{ matrix.tox_system_factor }}-${{ matrix.tox_packages_factor }}-${{ matrix.os }}-xcode_${{ matrix.xcode_version_factor }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-tox-local-${{ matrix.tox_system_factor }}-${{ matrix.tox_packages_factor }}-${{ matrix.os }}-xcode_${{ matrix.xcode_version_factor }}
    steps:
      - uses: actions/checkout@v2
      - name: Select Xcode version
        run: |
          if [ ${{ matrix.xcode_version_factor }} != default ]; then sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode_version_factor }}.app; fi
      - name: Install test prerequisites
        run: |
          brew install tox
      - name: Install python3 from python.org
        # As of 2020-03-30 (https://github.com/actions/virtual-environments/blob/master/images/macos/macos-10.15-Readme.md),
        # Python 3.7.7 is installed on GitHub Actions runners.  But we install our own copy from the python.org binary package.
        run: |
          curl -o python3.pkg https://www.python.org/ftp/python/3.7.7/python-3.7.7-macosx10.9.pkg
          sudo installer -verbose -pkg python3.pkg -target /
        if: contains(matrix.tox_system_factor, 'python3_pythonorg')
      - uses: actions/download-artifact@v2
        with:
          path: sage-local-artifact
          name: ${{ env.LOCAL_ARTIFACT_NAME }}
        if: contains(matrix.stage, '2')
      - name: Extract sage-local artifact
        # This is macOS tar -- cannot use --listed-incremental
        run: |
          .github/workflows/extract-sage-local.sh sage-local-artifact/sage-local-*.tar
        if: contains(matrix.stage, '2')
      - name: Build and test with tox
        # We use a high parallelization on purpose in order to catch possible parallelization bugs in the build scripts.
        # For doctesting, we use a lower parallelization to avoid timeouts.
        run: |
          case "${{ matrix.stage }}" in
            1)               export TARGETS_PRE="all-sage-local" TARGETS="all-sage-local" TARGETS_OPTIONAL=""
                             ;;
            2)               export TARGETS_PRE="all-sage-local" TARGETS="build doc-html" TARGETS_OPTIONAL="ptest"
                             ;;
            2-optional*)     export TARGETS_PRE="build/make/Makefile" TARGETS="build/make/Makefile"
                             targets_pattern="${{ matrix.stage }}"
                             targets_pattern="${targets_pattern#2-optional-}"
                             export TARGETS_OPTIONAL=$( echo $(PATH=build/bin:$PATH build/bin/sage-package list :optional: | grep -v  database_stein_watkins\\$ | grep -v polytopes_db_4d | grep -v cplex | grep -v gurobi | grep "^[$targets_pattern]" ) )
                             ;;
          esac
          MAKE="make -j12" tox -e $TOX_ENV -- SAGE_NUM_THREADS=4 $TARGETS
      - name: Prepare logs artifact
        run: |
          mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; cp -r .tox/*/log "artifacts/$LOGS_ARTIFACT_NAME"
        if: always()
      - uses: actions/upload-artifact@v1
        with:
          path: artifacts
          name: ${{ env.LOGS_ARTIFACT_NAME }}
        if: always()
      - name: Print out logs for immediate inspection
        # and markup the output with GitHub Actions logging commands
        run: |
          .github/workflows/scan-logs.sh "artifacts/$LOGS_ARTIFACT_NAME"
        if: always()
      - name: Prepare sage-local artifact
        # This also includes the copies of homebrew or conda installed in the tox environment.
        # We use absolute pathnames in the tar file.
        # This is macOS tar -- cannot use --remove-files.
        # We remove the $SAGE_LOCAL/lib64 link, which will be recreated by the next stage.
        run: |
          mkdir -p sage-local-artifact && (cd .tox/$TOX_ENV && rm -f "local/lib64" && tar -cf - $(pwd)) > sage-local-artifact/sage-${{ env.TOX_ENV }}-${{ matrix.stage }}.tar
        if: contains(matrix.stage, '1')
      - uses: actions/upload-artifact@v2
        with:
          path: sage-local-artifact/sage-${{ env.TOX_ENV }}-${{ matrix.stage }}.tar
          name: ${{ env.LOCAL_ARTIFACT_NAME }}
        if: always()
